{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMedia = createMedia;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _DynamicResponsive = require(\"./DynamicResponsive\");\n\nvar _MediaQueries = require(\"./MediaQueries\");\n\nvar _Utils = require(\"./Utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * This is used to generate a Media component, its context provider, and CSS\n * rules based on your applicationâ€™s breakpoints and interactions.\n *\n * Note that the interaction queries are entirely up to you to define and they\n * should be written in such a way that they match when you want the element to\n * be hidden.\n *\n * @example\n *\n   ```tsx\n   const MyAppMedia = createMedia({\n     breakpoints: {\n       xs: 0,\n       sm: 768,\n       md: 900\n       lg: 1024,\n       xl: 1192,\n     },\n     interactions: {\n       hover: `not all and (hover:hover)`\n     },\n   })\n\n   export const Media = MyAppMedia.Media\n   export const MediaContextProvider = MyAppMedia.MediaContextProvider\n   export const createMediaStyle = MyAppMedia.createMediaStyle\n   ```\n *\n */\n\n\nfunction createMedia(config) {\n  var _class, _temp;\n\n  var breakpoints = (0, _Utils.castBreakpointsToIntegers)(config.breakpoints);\n  var mediaQueries = new _MediaQueries.MediaQueries(breakpoints, config.interactions || {});\n  var DynamicResponsive = (0, _DynamicResponsive.createResponsiveComponents)();\n\n  var MediaContext = _react.default.createContext({});\n\n  MediaContext.displayName = \"Media.Context\";\n\n  var MediaParentContext = _react.default.createContext({\n    hasParentMedia: false,\n    breakpointProps: {}\n  });\n\n  MediaContext.displayName = \"MediaParent.Context\";\n  var getMediaContextValue = (0, _Utils.memoize)(function (onlyMatch) {\n    return {\n      onlyMatch: onlyMatch\n    };\n  });\n\n  var MediaContextProvider = function MediaContextProvider(_ref) {\n    var disableDynamicMediaQueries = _ref.disableDynamicMediaQueries,\n        onlyMatch = _ref.onlyMatch,\n        children = _ref.children;\n\n    if (disableDynamicMediaQueries) {\n      var MediaContextValue = getMediaContextValue(onlyMatch);\n      return _react.default.createElement(MediaContext.Provider, {\n        value: MediaContextValue\n      }, children);\n    } else {\n      return _react.default.createElement(DynamicResponsive.Provider, {\n        mediaQueries: mediaQueries.dynamicResponsiveMediaQueries,\n        initialMatchingMediaQueries: (0, _Utils.intersection)(mediaQueries.mediaQueryTypes, onlyMatch)\n      }, _react.default.createElement(DynamicResponsive.Consumer, null, function (matches) {\n        var matchingMediaQueries = Object.keys(matches).filter(function (key) {\n          return matches[key];\n        });\n        var MediaContextValue = getMediaContextValue((0, _Utils.intersection)(matchingMediaQueries, onlyMatch));\n        return _react.default.createElement(MediaContext.Provider, {\n          value: MediaContextValue\n        }, children);\n      }));\n    }\n  };\n\n  var Media = (_temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(Media, _React$Component);\n\n    function Media(props) {\n      var _this;\n\n      _classCallCheck(this, Media);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Media).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getMediaParentContextValue\", (0, _Utils.memoize)(function (breakpointProps) {\n        return {\n          hasParentMedia: true,\n          breakpointProps: breakpointProps\n        };\n      }));\n\n      validateProps(props);\n      return _this;\n    }\n\n    _createClass(Media, [{\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        var children = props.children,\n            passedClassName = props.className,\n            style = props.style,\n            interaction = props.interaction,\n            breakpointProps = _objectWithoutProperties(props, [\"children\", \"className\", \"style\", \"interaction\"]);\n\n        var mediaParentContextValue = this.getMediaParentContextValue(breakpointProps);\n        return _react.default.createElement(MediaParentContext.Consumer, null, function (mediaParentContext) {\n          return _react.default.createElement(MediaParentContext.Provider, {\n            value: mediaParentContextValue\n          }, _react.default.createElement(MediaContext.Consumer, null, function () {\n            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                onlyMatch = _ref2.onlyMatch;\n\n            var className;\n\n            if (props.interaction) {\n              className = (0, _Utils.createClassName)(\"interaction\", props.interaction);\n            } else {\n              if (props.at) {\n                var largestBreakpoint = mediaQueries.breakpoints.largestBreakpoint;\n\n                if (props.at === largestBreakpoint) {\n                  // TODO: We should look into making Reactâ€™s __DEV__ available\n                  //       and have webpack completely compile these away.\n                  var ownerName = null;\n\n                  try {\n                    var owner = _this2._reactInternalFiber._debugOwner.type;\n                    ownerName = owner.displayName || owner.name;\n                  } catch (err) {// no-op\n                  }\n\n                  console.warn(\"[@artsy/fresnel] \" + \"`at` is being used with the largest breakpoint. \" + \"Consider using `<Media greaterThanOrEqual=\" + \"\\\"\".concat(largestBreakpoint, \"\\\">` to account for future \") + \"breakpoint definitions outside of this range.\".concat(ownerName ? \" It is being used in the \".concat(ownerName, \" component.\") : \"\"));\n                }\n              }\n\n              var type = (0, _Utils.propKey)(breakpointProps);\n              var breakpoint = breakpointProps[type];\n              className = (0, _Utils.createClassName)(type, breakpoint);\n            }\n\n            var doesMatchParent = !mediaParentContext.hasParentMedia || (0, _Utils.intersection)(mediaQueries.breakpoints.toVisibleAtBreakpointSet(mediaParentContext.breakpointProps), mediaQueries.breakpoints.toVisibleAtBreakpointSet(breakpointProps)).length > 0;\n            var renderChildren = doesMatchParent && (onlyMatch === undefined || mediaQueries.shouldRenderMediaQuery(_objectSpread({}, breakpointProps, {\n              interaction: interaction\n            }), onlyMatch));\n\n            if (props.children instanceof Function) {\n              return props.children(className, renderChildren);\n            } else {\n              return _react.default.createElement(\"div\", {\n                className: \"fresnel-container \".concat(className, \" \").concat(passedClassName),\n                style: style,\n                suppressHydrationWarning: !renderChildren\n              }, renderChildren ? props.children : null);\n            }\n          }));\n        });\n      }\n    }]);\n\n    return Media;\n  }(_react.default.Component), _defineProperty(_class, \"defaultProps\", {\n    className: \"\",\n    style: {}\n  }), _defineProperty(_class, \"contextType\", MediaParentContext), _temp);\n  return {\n    Media: Media,\n    MediaContextProvider: MediaContextProvider,\n    createMediaStyle: mediaQueries.toStyle,\n    SortedBreakpoints: _toConsumableArray(mediaQueries.breakpoints.sortedBreakpoints),\n    findBreakpointAtWidth: mediaQueries.breakpoints.findBreakpointAtWidth,\n    findBreakpointsForWidths: mediaQueries.breakpoints.findBreakpointsForWidths,\n    valuesWithBreakpointProps: mediaQueries.breakpoints.valuesWithBreakpointProps\n  };\n}\n\nvar MutuallyExclusiveProps = _MediaQueries.MediaQueries.validKeys();\n\nfunction validateProps(props) {\n  var selectedProps = Object.keys(props).filter(function (prop) {\n    return MutuallyExclusiveProps.includes(prop);\n  });\n\n  if (selectedProps.length < 1) {\n    throw new Error(\"1 of \".concat(MutuallyExclusiveProps.join(\", \"), \" is required.\"));\n  } else if (selectedProps.length > 1) {\n    throw new Error(\"Only 1 of \".concat(selectedProps.join(\", \"), \" is allowed at a time.\"));\n  }\n}","map":{"version":3,"mappings":"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","names":["createMedia","config","breakpoints","mediaQueries","MediaQueries","interactions","DynamicResponsive","MediaContext","React","createContext","displayName","MediaParentContext","hasParentMedia","breakpointProps","getMediaContextValue","onlyMatch","MediaContextProvider","disableDynamicMediaQueries","children","MediaContextValue","_react","Provider","value","dynamicResponsiveMediaQueries","initialMatchingMediaQueries","mediaQueryTypes","Consumer","matchingMediaQueries","Object","keys","matches","filter","key","Media","_inherits","props","_classCallCheck","_this","_defineProperty","validateProps","_createClass","passedClassName","className","style","interaction","mediaParentContextValue","getMediaParentContextValue","at","largestBreakpoint","ownerName","owner","_this2","_reactInternalFiber","_debugOwner","type","name","err","console","warn","breakpoint","doesMatchParent","mediaParentContext","toVisibleAtBreakpointSet","length","renderChildren","undefined","shouldRenderMediaQuery","Function","suppressHydrationWarning","Component","createMediaStyle","toStyle","SortedBreakpoints","sortedBreakpoints","findBreakpointAtWidth","findBreakpointsForWidths","valuesWithBreakpointProps","MutuallyExclusiveProps","validKeys","selectedProps","includes","prop","Error","join"],"sources":["../src/Media.tsx"],"sourcesContent":["// tslint:disable:jsdoc-format\n\nimport React, { CSSProperties } from \"react\"\nimport { createResponsiveComponents } from \"./DynamicResponsive\"\nimport { MediaQueries } from \"./MediaQueries\"\nimport {\n  intersection,\n  propKey,\n  createClassName,\n  castBreakpointsToIntegers,\n  memoize,\n} from \"./Utils\"\nimport { BreakpointConstraint } from \"./Breakpoints\"\n\n/**\n * A render prop that can be used to render a different container element than\n * the default `div`.\n *\n * @see {@link MediaProps.children}.\n */\nexport type RenderProp = (\n  className: string,\n  renderChildren: boolean\n) => React.ReactNode\n\n// TODO: All of these props should be mutually exclusive. Using a union should\n//       probably be made possible by https://github.com/Microsoft/TypeScript/pull/27408.\nexport interface MediaBreakpointProps<BreakpointKey = string> {\n  /**\n   * Children will only be shown if the viewport matches the specified\n   * breakpoint. That is, a viewport width thatâ€™s higher than the configured\n   * breakpoint value, but lower than the value of the next breakpoint, if any\n   * larger breakpoints exist at all.\n   *\n   * @example\n\n     ```tsx\n     // With breakpoints defined like these\n     { xs: 0, sm: 768, md: 1024 }\n\n     // Matches a viewport that has a width between 0 and 768\n     <Media at=\"xs\">ohai</Media>\n\n     // Matches a viewport that has a width between 768 and 1024\n     <Media at=\"sm\">ohai</Media>\n\n     // Matches a viewport that has a width over 1024\n     <Media at=\"md\">ohai</Media>\n     ```\n   *\n   */\n  at?: BreakpointKey\n\n  /**\n   * Children will only be shown if the viewport is smaller than the specified\n   * breakpoint.\n   *\n   * @example\n\n     ```tsx\n     // With breakpoints defined like these\n     { xs: 0, sm: 768, md: 1024 }\n\n    // Matches a viewport that has a width from 0 to 767\n     <Media lessThan=\"sm\">ohai</Media>\n\n     // Matches a viewport that has a width from 0 to 1023\n     <Media lessThan=\"md\">ohai</Media>\n     ```\n   *\n   */\n  lessThan?: BreakpointKey\n\n  /**\n   * Children will only be shown if the viewport is greater than the specified\n   * breakpoint.\n   *\n   * @example\n\n     ```tsx\n     // With breakpoints defined like these\n     { xs: 0, sm: 768, md: 1024 }\n\n     // Matches a viewport that has a width from 768 to infinity\n     <Media greaterThan=\"xs\">ohai</Media>\n\n     // Matches a viewport that has a width from 1024 to infinity\n     <Media greaterThan=\"sm\">ohai</Media>\n     ```\n   *\n   */\n  greaterThan?: BreakpointKey\n\n  /**\n   * Children will only be shown if the viewport is greater or equal to the\n   * specified breakpoint.\n   *\n   * @example\n\n     ```tsx\n     // With breakpoints defined like these\n     { xs: 0, sm: 768, md: 1024 }\n\n     // Matches a viewport that has a width from 0 to infinity\n     <Media greaterThanOrEqual=\"xs\">ohai</Media>\n\n     // Matches a viewport that has a width from 768 to infinity\n     <Media greaterThanOrEqual=\"sm\">ohai</Media>\n\n     // Matches a viewport that has a width from 1024 to infinity\n     <Media greaterThanOrEqual=\"md\">ohai</Media>\n     ```\n   *\n   */\n  greaterThanOrEqual?: BreakpointKey\n\n  /**\n   * Children will only be shown if the viewport is between the specified\n   * breakpoints. That is, a viewport width thatâ€™s higher than or equal to the\n   * small breakpoint value, but lower than the value of the large breakpoint.\n   *\n   * @example\n\n     ```tsx\n     // With breakpoints defined like these\n     { xs: 0, sm: 768, md: 1024 }\n\n     // Matches a viewport that has a width from 0 to 767\n     <Media between={[\"xs\", \"sm\"]}>ohai</Media>\n\n     // Matches a viewport that has a width from 0 to 1023\n     <Media between={[\"xs\", \"md\"]}>ohai</Media>\n     ```\n   *\n   */\n  between?: [BreakpointKey, BreakpointKey]\n}\n\nexport interface MediaProps<BreakpointKey, Interaction>\n  extends MediaBreakpointProps<BreakpointKey> {\n  /**\n   * Children will only be shown if the interaction query matches.\n   *\n   * @example\n\n     ```tsx\n     // With interactions defined like these\n     { hover: \"(hover: hover)\" }\n\n     // Matches an input device that is capable of hovering\n     <Media interaction=\"hover\">ohai</Media>\n     ```\n   */\n  interaction?: Interaction\n\n  /**\n   * The component(s) that should conditionally be shown, depending on the media\n   * query matching.\n   *\n   * In case a different element is preferred, a render prop can be provided\n   * that receives the class-name it should use to have the media query styling\n   * applied.\n   *\n   * Additionally, the render prop receives a boolean that indicates wether or\n   * not its children should be rendered, which will be `false` if the media\n   * query is not included in the `onlyMatch` list. Use this flag if your\n   * componentâ€™s children may be expensive to render and you want to avoid any\n   * unnecessary work.\n   * (@see {@link MediaContextProviderProps.onlyMatch} for details)\n   *\n   * @example\n   *\n     ```tsx\n     const Component = () => (\n       <Media greaterThan=\"xs\">\n         {(className, renderChildren) => (\n           <span className={className}>\n             {renderChildren && \"ohai\"}\n           </span>\n         )}\n       </Media>\n     )\n     ```\n   *\n   */\n  children: React.ReactNode | RenderProp\n\n  /**\n   * Additional classNames to passed down and applied to Media container\n   */\n  className?: string\n\n  /**\n   * Additional styles to passed down and applied to Media container\n   */\n  style?: CSSProperties\n}\n\nexport interface MediaContextProviderProps<M> {\n  /**\n   * This list of breakpoints and interactions can be used to limit the rendered\n   * output to these.\n   *\n   * For instance, when a server knows for some user-agents that certain\n   * breakpoints will never apply, omitting them altogether will lower the\n   * rendered byte size.\n   */\n  onlyMatch?: M[]\n\n  /**\n   * Disables usage of browser MediaQuery API to only render at the current\n   * breakpoint.\n   *\n   * Use this with caution, as disabling this means React components for all\n   * breakpoints will be mounted client-side and all associated life-cycle hooks\n   * will be triggered, which could lead to unintended side-effects.\n   */\n  disableDynamicMediaQueries?: boolean\n}\n\nexport interface CreateMediaConfig {\n  /**\n   * The breakpoint definitions for your application. Width definitions should\n   * start at 0.\n   *\n   * @see {@link createMedia}\n   */\n  breakpoints: { [key: string]: number | string }\n\n  /**\n   * The interaction definitions for your application.\n   */\n  interactions?: { [key: string]: string }\n}\n\nexport interface CreateMediaResults<BreakpointKey, Interactions> {\n  /**\n   * The React component that you use throughout your application.\n   *\n   * @see {@link MediaBreakpointProps}\n   */\n  Media: React.ComponentType<MediaProps<BreakpointKey, Interactions>>\n\n  /**\n   * The React Context provider component that you use to constrain rendering of\n   * breakpoints to a set list and to enable client-side dynamic constraining.\n   *\n   * @see {@link MediaContextProviderProps}\n   */\n  MediaContextProvider: React.ComponentType<\n    MediaContextProviderProps<BreakpointKey | Interactions>\n  >\n\n  /**\n   * Generates a set of CSS rules that you should include in your applicationâ€™s\n   * styling to enable the hiding behaviour of your `Media` component uses.\n   */\n  createMediaStyle(breakpointKeys?: BreakpointConstraint[]): string\n\n  /**\n   * A list of your applicationâ€™s breakpoints sorted from small to large.\n   */\n  SortedBreakpoints: BreakpointKey[]\n\n  /**\n   * Creates a list of your applicationâ€™s breakpoints that support the given\n   * widths and everything in between.\n   */\n  findBreakpointsForWidths(\n    fromWidth: number,\n    throughWidth: number\n  ): BreakpointKey[] | undefined\n\n  /**\n   * Finds the breakpoint that matches the given width.\n   */\n  findBreakpointAtWidth(width: number): BreakpointKey | undefined\n\n  /**\n   * Maps a list of values for various breakpoints to props that can be used\n   * with the `Media` component.\n   *\n   * The values map to corresponding indices in the sorted breakpoints array. If\n   * less values are specified than the number of breakpoints your application\n   * has, the last value will be applied to all subsequent breakpoints.\n   */\n  valuesWithBreakpointProps<SizeValue>(\n    values: SizeValue[]\n  ): Array<[SizeValue, MediaBreakpointProps<BreakpointKey>]>\n}\n\n/**\n * This is used to generate a Media component, its context provider, and CSS\n * rules based on your applicationâ€™s breakpoints and interactions.\n *\n * Note that the interaction queries are entirely up to you to define and they\n * should be written in such a way that they match when you want the element to\n * be hidden.\n *\n * @example\n *\n   ```tsx\n   const MyAppMedia = createMedia({\n     breakpoints: {\n       xs: 0,\n       sm: 768,\n       md: 900\n       lg: 1024,\n       xl: 1192,\n     },\n     interactions: {\n       hover: `not all and (hover:hover)`\n     },\n   })\n\n   export const Media = MyAppMedia.Media\n   export const MediaContextProvider = MyAppMedia.MediaContextProvider\n   export const createMediaStyle = MyAppMedia.createMediaStyle\n   ```\n *\n */\nexport function createMedia<\n  MediaConfig extends CreateMediaConfig,\n  BreakpointKey extends keyof MediaConfig[\"breakpoints\"],\n  Interaction extends keyof MediaConfig[\"interactions\"]\n>(config: MediaConfig): CreateMediaResults<BreakpointKey, Interaction> {\n  const breakpoints = castBreakpointsToIntegers(config.breakpoints)\n\n  const mediaQueries = new MediaQueries<BreakpointKey>(\n    breakpoints,\n    config.interactions || {}\n  )\n\n  const DynamicResponsive = createResponsiveComponents()\n\n  const MediaContext = React.createContext<\n    MediaContextProviderProps<BreakpointKey | Interaction>\n  >({})\n  MediaContext.displayName = \"Media.Context\"\n\n  const MediaParentContext = React.createContext<{\n    hasParentMedia: boolean\n    breakpointProps: MediaBreakpointProps<BreakpointKey>\n  }>({ hasParentMedia: false, breakpointProps: {} })\n  MediaContext.displayName = \"MediaParent.Context\"\n\n  const getMediaContextValue = memoize(onlyMatch => ({\n    onlyMatch,\n  }))\n\n  const MediaContextProvider: React.FunctionComponent<\n    MediaContextProviderProps<BreakpointKey | Interaction>\n  > = ({ disableDynamicMediaQueries, onlyMatch, children }) => {\n    if (disableDynamicMediaQueries) {\n      const MediaContextValue = getMediaContextValue(onlyMatch)\n\n      return (\n        <MediaContext.Provider value={MediaContextValue}>\n          {children}\n        </MediaContext.Provider>\n      )\n    } else {\n      return (\n        <DynamicResponsive.Provider\n          mediaQueries={mediaQueries.dynamicResponsiveMediaQueries}\n          initialMatchingMediaQueries={intersection(\n            mediaQueries.mediaQueryTypes,\n            onlyMatch\n          )}\n        >\n          <DynamicResponsive.Consumer>\n            {matches => {\n              const matchingMediaQueries = Object.keys(matches).filter(\n                key => matches[key]\n              )\n\n              const MediaContextValue = getMediaContextValue(\n                intersection(matchingMediaQueries, onlyMatch)\n              )\n\n              return (\n                <MediaContext.Provider value={MediaContextValue}>\n                  {children}\n                </MediaContext.Provider>\n              )\n            }}\n          </DynamicResponsive.Consumer>\n        </DynamicResponsive.Provider>\n      )\n    }\n  }\n\n  const Media = class extends React.Component<\n    MediaProps<BreakpointKey, Interaction>\n  > {\n    constructor(props) {\n      super(props)\n      validateProps(props)\n    }\n\n    static defaultProps = {\n      className: \"\",\n      style: {},\n    }\n\n    static contextType = MediaParentContext\n\n    getMediaParentContextValue = memoize(\n      (breakpointProps: MediaBreakpointProps<BreakpointKey>) => ({\n        hasParentMedia: true,\n        breakpointProps,\n      })\n    )\n\n    render() {\n      const props = this.props\n      const {\n        children,\n        className: passedClassName,\n        style,\n        interaction,\n        ...breakpointProps\n      } = props\n      const mediaParentContextValue = this.getMediaParentContextValue(\n        breakpointProps\n      )\n\n      return (\n        <MediaParentContext.Consumer>\n          {mediaParentContext => {\n            return (\n              <MediaParentContext.Provider value={mediaParentContextValue}>\n                <MediaContext.Consumer>\n                  {({ onlyMatch } = {}) => {\n                    let className: string | null\n                    if (props.interaction) {\n                      className = createClassName(\n                        \"interaction\",\n                        props.interaction\n                      )\n                    } else {\n                      if (props.at) {\n                        const largestBreakpoint =\n                          mediaQueries.breakpoints.largestBreakpoint\n                        if (props.at === largestBreakpoint) {\n                          // TODO: We should look into making Reactâ€™s __DEV__ available\n                          //       and have webpack completely compile these away.\n                          let ownerName = null\n                          try {\n                            const owner = (this as any)._reactInternalFiber\n                              ._debugOwner.type\n                            ownerName = owner.displayName || owner.name\n                          } catch (err) {\n                            // no-op\n                          }\n\n                          console.warn(\n                            \"[@artsy/fresnel] \" +\n                              \"`at` is being used with the largest breakpoint. \" +\n                              \"Consider using `<Media greaterThanOrEqual=\" +\n                              `\"${largestBreakpoint}\">\\` to account for future ` +\n                              `breakpoint definitions outside of this range.${\n                                ownerName\n                                  ? ` It is being used in the ${ownerName} component.`\n                                  : \"\"\n                              }`\n                          )\n                        }\n                      }\n\n                      const type = propKey(breakpointProps)\n                      const breakpoint = breakpointProps[type]!\n                      className = createClassName(type, breakpoint)\n                    }\n\n                    const doesMatchParent =\n                      !mediaParentContext.hasParentMedia ||\n                      intersection(\n                        mediaQueries.breakpoints.toVisibleAtBreakpointSet(\n                          mediaParentContext.breakpointProps\n                        ),\n                        mediaQueries.breakpoints.toVisibleAtBreakpointSet(\n                          breakpointProps\n                        )\n                      ).length > 0\n                    const renderChildren =\n                      doesMatchParent &&\n                      (onlyMatch === undefined ||\n                        mediaQueries.shouldRenderMediaQuery(\n                          { ...breakpointProps, interaction },\n                          onlyMatch\n                        ))\n\n                    if (props.children instanceof Function) {\n                      return props.children(className, renderChildren)\n                    } else {\n                      return (\n                        <div\n                          className={`fresnel-container ${className} ${passedClassName}`}\n                          style={style}\n                          suppressHydrationWarning={!renderChildren}\n                        >\n                          {renderChildren ? props.children : null}\n                        </div>\n                      )\n                    }\n                  }}\n                </MediaContext.Consumer>\n              </MediaParentContext.Provider>\n            )\n          }}\n        </MediaParentContext.Consumer>\n      )\n    }\n  }\n\n  return {\n    Media,\n    MediaContextProvider,\n    createMediaStyle: mediaQueries.toStyle,\n    SortedBreakpoints: [...mediaQueries.breakpoints.sortedBreakpoints],\n    findBreakpointAtWidth: mediaQueries.breakpoints.findBreakpointAtWidth,\n    findBreakpointsForWidths: mediaQueries.breakpoints.findBreakpointsForWidths,\n    valuesWithBreakpointProps:\n      mediaQueries.breakpoints.valuesWithBreakpointProps,\n  }\n}\n\nconst MutuallyExclusiveProps: string[] = MediaQueries.validKeys()\n\nfunction validateProps(props) {\n  const selectedProps = Object.keys(props).filter(prop =>\n    MutuallyExclusiveProps.includes(prop)\n  )\n  if (selectedProps.length < 1) {\n    throw new Error(`1 of ${MutuallyExclusiveProps.join(\", \")} is required.`)\n  } else if (selectedProps.length > 1) {\n    throw new Error(\n      `Only 1 of ${selectedProps.join(\", \")} is allowed at a time.`\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}